一个小程序主体部分由三个文件组成，必须放在项目的根目录app.js（小程序逻辑），app.json（小程序公共设置），app.wxss（小程序公共样式表）
一个小程序页面由四个文件组成js（页面逻辑）,wxml（页面结构）,wxss（页面样式表）,json（页面配置）
为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名

小程序配置 app.json ：
是对当前小程序的全局配置（公共配置），包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。

工具配置 project.config.json ：
小程序开发者工具在每个项目的根目录都会生成一个 project.config.json，你在工具上做的任何配置都会写入到这个文件，当你重新安装工具或者换电脑工作时，你只要载入同一个项目的代码包，开发者工具就自动会帮你恢复到当时你开发项目时的个性化配置，其中会包括编辑器的颜色、代码上传时自动压缩等等一系列选项。

页面配置 page.json ：
这里的 page.json 其实用来表示 pages/logs 目录下的 logs.json 这类和小程序页面相关的配置

WXML 模板  ：
WXML 充当的就是类似 HTML 的角色（用来描述当前这个页面的结构）
和 HTML 非常相似，有标签、属性等等构成。
不同之处：
1.标签名字有点不一样（小程序的 WXML 用的标签是 view, button, text 等等，这些标签就是小程序给开发者包装好的基本能力，平台还提供了地图、视频、音频等等组件能力）
2.多了一些 wx:if 这样的属性以及 {{ }} 这样的表达式 小程序的框架也是用到了MVVM这种开发模式（例如 React, Vue)，提倡把渲染和逻辑分离。简单来说就是不要再让 JS 直接操控 DOM，JS只需要管理状态即可，然后再通过一种模板语法来描述状态和界面结构的关系即可。
例：WXML 是这么写 :
<text></text>
JS 只需要管理状态即可:
this.setData({ msg: "Hello World" })
通过 {{ }} 的语法把一个变量绑定到界面上，我们称为数据绑定。仅仅通过数据绑定还不够完整的描述状态和界面的关系，还需要 if/else, for等控制能力，在小程序里边，这些控制能力都用 wx: 开头的属性来表达。


WXSS 样式：（公共样式表）
WXSS 具有 CSS 大部分的特性，小程序在 WXSS 也做了一些扩充和修改。
1.新增了尺寸单位。在写 CSS 样式时，开发者需要考虑到手机设备的屏幕会有不同的宽度和设备像素比，采用一些技巧来换算一些像素单位。WXSS 在底层支持新的尺寸单位 rpx ，开发者可以免去换算的烦恼，只要交给小程序底层来换算即可，由于换算采用的浮点数运算，所以运算结果会和预期结果有一点点偏差。
2.提供了全局的样式和局部样式。和前边 app.json, page.json 的概念相同，你可以写一个 app.wxss 作为全局样式，会作用于当前小程序的所有页面，局部页面样式 page.wxss 仅对当前页面生效。
3.此外 WXSS 仅支持部分 CSS 选择器


JS 交互逻辑：

例：
<view>{{ msg }}</view>
<button bindtap="clickMe">点击我</button>
js
Page({
  clickMe: function() {
    this.setData({ msg: "Hello World" })
  }
})

在QuickStart 例子中，在 pages/index/index.js 就调用了 wx.getUserInfo 获取微信用户的头像和昵称，最后通过 setData 把获取到的信息显示到界面上。